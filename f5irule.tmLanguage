<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>txt</string>
		<string>irule</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!iRule</string>
	<key>foldingEndMarker</key>
	<string>^\s*\}</string>
	<key>foldingStartMarker</key>
	<string>\{\s*$</string>
	<key>name</key>
	<string>iRule</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(?&lt;=^|;)\s*((#))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.line.number-sign.irule</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.irule</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>comment.line.number-sign.irule</string>
			<key>end</key>
			<string>\n</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\\\\|\\\n)</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.irule</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.name.event.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(when)\s([A-Z,2,_]+)</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string></string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>command.httpheader.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\s*\[?(HTTP::header)\s([^\s"]+)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;=^|[\[{;])\s*(after|break|catch|continue|default|error|eval|exit|for|foreach|if|return|switch|update|uplevel|vwait|while)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;=^|})\s*(then|elseif|else)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b\s(and|contains|ends_with|equals|eq|matches|matches_glob|matches_regex|ne|not|or|starts_with)\b\s\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.log.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(log\s(-noname )?(local[0-9]\.)?)</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.other.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b([0-9]+)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b\$\w+\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;=^|[\[{;])\s*(append|apply|argc|argv|argv0|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_path|auto_qualify|auto_reset|bgerror|binary|break|catch|cd|chan|clock|close|concat|continue|coroutine|dde|dict|encoding|env|eof|errorCode|errorInfo|exec|exit|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|for|foreach|format|gets|glob|global|history|http|if|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|lmap|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|mathfunc|mathop|memory|msgcat|my|namespace|next|nextto|oo::class|oo::copy|oo::define|oo::objdefine|oo::object|open|package|parray|pid|pkg::create|pkg_mkIndex|platform|platform::shell|proc|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|return|safe|scan|seek|self|set|socket|source|split|string|subst|switch|tailcall|Tcl|tcl::prefix|tcl_endOfWord|tcl_findLibrary|tcl_interactive|tcl_library|tcl_nonwordchars|tcl_patchLevel|tcl_pkgPath|tcl_platform|tcl_precision|tcl_rcFileName|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_traceCompile|tcl_traceExec|tcl_version|tcl_wordBreakAfter|tcl_wordBreakBefore|tcl_wordchars|tcltest|tell|throw|time|tm|trace|transchan|try|unknown|unload|unset|upvar|variable|while|yield|yieldto|zlib)\b</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=^|[\[{;])\s*(regexp|regsub)\b\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.irule</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>special-case regexp/regsub keyword in order to handle the expression</string>
			<key>end</key>
			<string>[\n;\]]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(?:.|\n)</string>
					<key>name</key>
					<string>constant.character.escape.irule</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>switch for regexp</string>
					<key>match</key>
					<string>-\w+\s*</string>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>--\s*</string>
					<key>comment</key>
					<string>end of switches</string>
					<key>end</key>
					<string></string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#regexp</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#escape</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.irule</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.irule</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.irule</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#embedded</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>bare-string</key>
		<dict>
			<key>begin</key>
			<string>(?:^|(?&lt;=\s))"</string>
			<key>comment</key>
			<string>matches a single quote-enclosed word without scoping</string>
			<key>end</key>
			<string>"([^\s\]]*)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.irule</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
			</array>
		</dict>
		<key>braces</key>
		<dict>
			<key>begin</key>
			<string>(?:^|(?&lt;=\s))\{</string>
			<key>comment</key>
			<string>matches a single brace-enclosed word</string>
			<key>end</key>
			<string>\}([^\s\]]*)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.irule</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[{}\n]</string>
					<key>name</key>
					<string>constant.character.escape.irule</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inner-braces</string>
				</dict>
			</array>
		</dict>
		<key>embedded</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.begin.irule</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.end.irule</string>
				</dict>
			</dict>
			<key>name</key>
			<string>source.irule.embedded</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.irule</string>
				</dict>
			</array>
		</dict>
		<key>escape</key>
		<dict>
			<key>match</key>
			<string>\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)</string>
			<key>name</key>
			<string>constant.character.escape.irule</string>
		</dict>
		<key>inner-braces</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>comment</key>
			<string>matches a nested brace in a brace-enclosed word</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[{}\n]</string>
					<key>name</key>
					<string>constant.character.escape.irule</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inner-braces</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>begin</key>
			<string>(?=\S)(?![\n;\]])</string>
			<key>comment</key>
			<string>matches a single word, named as a regexp, then swallows the rest of the command</string>
			<key>end</key>
			<string>(?=[\n;\]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[^ \t\n;])</string>
					<key>end</key>
					<string>(?=[ \t\n;])</string>
					<key>name</key>
					<string>string.regexp.irule</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#braces</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#bare-string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[ \t]</string>
					<key>comment</key>
					<string>swallow the rest of the command</string>
					<key>end</key>
					<string>(?=[\n;\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#embedded</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escape</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#braces</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>(?:^|(?&lt;=\s))(?=")</string>
			<key>comment</key>
			<string>matches a single quote-enclosed word with scoping</string>
			<key>end</key>
			<string></string>
			<key>name</key>
			<string>string.quoted.double.irule</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#bare-string</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.irule</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\$)((?:[a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})</string>
			<key>name</key>
			<string>variable.other.irule</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.irule</string>
	<key>uuid</key>
	<string>e7058651-8802-4348-bd4f-a13066a210b3</string>
</dict>
</plist>
