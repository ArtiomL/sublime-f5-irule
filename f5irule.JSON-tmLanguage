{ "name": "iRule",
  "scopeName": "source.irule",
  "fileTypes": [
    "txt"
  ],
  "firstLineMatch": "^#!iRule.*",
  "foldingStartMarker": "\\{\\s*$",
  "foldingEndMarker": "^\\s*\\}",
  "patterns": [
    {
      "begin": "(?<=^|;)\\s*((#))",
      "beginCaptures": {
        "1": {
          "name": "comment.line.number-sign.irule"
        },

        "2": {
          "name": "punctuation.definition.comment.irule"
        }
      },

      "contentName": "comment.line.number-sign.irule",
      "end": "\\n",
      "patterns": [
        {
          "match": "(\\\\\\\\|\\\\\\n)"
        }
      ]
    },

    {
      "match": "^\\s*(when)\\s+([^\\s]+)",
      "captures": {
        "1": {
          "name": "keyword.control.irule"
        },
        "2": {
          "name": "keyword.name.event.irule"
        }
      }
    },

    {
      "match": "^\\s*(HTTP::header)\\s([^\\s]+)",
      "captures": {
        "1": {
          "name": "keyword.control.irule"
        },
        "2": {
          "name": "command.httpheader.irule"
        }
      }
    },

    {
      "match": "^\\s*(HTTP::header)\\s+([^\\s]+)",
      "captures": {
        "1": {
          "name": "keyword.control.irule"
        },
        "2": {
          "name": "command.httpheader.irule"
        }
      }
    },

    {
      "match": "(?<=^|[\\[{;])\\s*(if|while|for|catch|return|break|continue|switch|exit|foreach|contains|ends_with|equals|matches_glob|matches_regex|starts_with|and|not|or)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.irule"
        }
      }
    },

    {
      "match": "(?<=^|})\\s*(then|elsif|else)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.irule"
        }
      }
    },
    {
      "match": "\\b([0-9]+)\\b",
      "captures": {
        "0": { "name": "keyword.other.irule" }
      }
    },
    {
      "match": "\\b\\$\\w+\\b",
      "captures": {
        "0": { "name": "pumctuation.definition.variable.irule" }
      }
    },
    {
      "captures": {
        "1": {
          "name": "keyword.other.irule"
        }
      }, 
      "match": "(?<=^|[\\[{;])\\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait)\\b"
    }, 
    {
      "begin": "(?<=^|[\\[{;])\\s*(regexp|regsub)\\b\\s*", 
      "beginCaptures": {
        "1": {
          "name": "keyword.other.irule"
        }
      }, 
      "comment": "special-case regexp/regsub keyword in order to handle the expression", 
      "end": "[\\n;\\]]", 
      "patterns": [
        {
          "match": "\\\\(?:.|\\n)", 
          "name": "constant.character.escape.irule"
        }, 
        {
          "comment": "switch for regexp", 
          "match": "-\\w+\\s*"
        }, 
        {
          "applyEndPatternLast": 1, 
          "begin": "--\\s*", 
          "comment": "end of switches", 
          "end": "", 
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }, 
        {
          "include": "#regexp"
        }
      ]
    }, 
    {
      "include": "#escape"
    }, 
    {
      "include": "#variable"
    }, 
    {
      "begin": "\"", 
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.irule"
        }
      }, 
      "end": "\"", 
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.irule"
        }
      }, 
      "name": "string.quoted.double.irule", 
      "patterns": [
        {
          "include": "#escape"
        }, 
        {
          "include": "#variable"
        }, 
        {
          "include": "#embedded"
        }
      ]
    }
  ],
  "repository": {
    "bare-string": {
      "begin": "(?:^|(?<=\\s))\"", 
        "comment": "matches a single quote-enclosed word without scoping", 
        "end": "\"([^\\s\\]]*)", 
        "endCaptures": {
          "1": {
            "name": "invalid.illegal.irule"
          }
        }, 
        "patterns": [
        {
          "include": "#escape"
        }, 
        {
          "include": "#variable"
        }
      ]
    },
    "braces": {
      "begin": "(?:^|(?<=\\s))\\{", 
      "comment": "matches a single brace-enclosed word", 
      "end": "\\}([^\\s\\]]*)", 
      "endCaptures": {
        "1": {
          "name": "invalid.illegal.irule"
        }
      }, 
      "patterns": [
        {
          "match": "\\\\[{}\\n]", 
          "name": "constant.character.escape.irule"
        }, 
        {
          "include": "#inner-braces"
        }
      ]
    }, 
    "embedded": {
      "begin": "\\[", 
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.begin.irule"
        }
      }, 
      "end": "\\]", 
      "endCaptures": {
        "0": {
          "name": "punctuation.section.embedded.end.irule"
        }
      }, 
      "name": "source.irule.embedded", 
      "patterns": [
        {
          "include": "source.irule"
        }
      ]
    }, 
    "escape": {
      "match": "\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)", 
      "name": "constant.character.escape.irule"
    }, 
    "inner-braces": {
      "begin": "\\{", 
      "comment": "matches a nested brace in a brace-enclosed word", 
      "end": "\\}", 
      "patterns": [
        {
          "match": "\\\\[{}\\n]", 
          "name": "constant.character.escape.irule"
        }, 
        {
          "include": "#inner-braces"
        }
      ]
    }, 
    "regexp": {
      "begin": "(?=\\S)(?![\\n;\\]])", 
      "comment": "matches a single word, named as a regexp, then swallows the rest of the command", 
      "end": "(?=[\\n;\\]])", 
      "patterns": [
        {
          "begin": "(?=[^ \\t\\n;])", 
          "end": "(?=[ \\t\\n;])", 
          "name": "string.regexp.irule", 
          "patterns": [
            {
              "include": "#braces"
            }, 
            {
              "include": "#bare-string"
            }, 
            {
              "include": "#escape"
            }, 
            {
              "include": "#variable"
            }
          ]
        }, 
        {
          "begin": "[ \\t]", 
          "comment": "swallow the rest of the command", 
          "end": "(?=[\\n;\\]])", 
          "patterns": [
            {
              "include": "#variable"
            }, 
            {
              "include": "#embedded"
            }, 
            {
              "include": "#escape"
            }, 
            {
              "include": "#braces"
            }, 
            {
              "include": "#string"
            }
          ]
        }
      ]
    }, 
    "string": {
      "applyEndPatternLast": 1, 
      "begin": "(?:^|(?<=\\s))(?=\")", 
      "comment": "matches a single quote-enclosed word with scoping", 
      "end": "", 
      "name": "string.quoted.double.irule", 
      "patterns": [
        {
          "include": "#bare-string"
        }
      ]
    }, 
    "variable": {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.irule"
        }
      }, 
      "match": "(\\$)((?:[a-zA-Z0-9_]|::)+(\\([^\\)]+\\))?|\\{[^\\}]*\\})", 
      "name": "variable.other.irule"
    }
  },
  "uuid": "e7058651-8802-4348-bd4f-a13066a210b3"
}
